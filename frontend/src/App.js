import React, { useState } from "react";
import axios from "axios";
import "./App.css";

function EmotionDetector() {
  const [text, setText] = useState("");
  const [emotion, setEmotion] = useState(null);
  const [loading, setLoading] = useState(false);

  const handledSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setEmotion(null);

    try {
      const response = await axios.post(
        "http://localhost:8000/api/recognition-emotion",
        { text }
      );
      setEmotion(response.data);

      // –ú–æ–∫-—Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —Ç–µ—Å—Ç—É
      const mockResponse = {
        emotion:
          text.toLowerCase().includes("—â–∞—Å–ª–∏–≤–∏–π") ||
          text.toLowerCase().includes("—Ä–∞–¥—ñ—Å–Ω–∏–π")
            ? "–ø–æ–∑–∏—Ç–∏–≤–Ω–∞"
            : text.toLowerCase().includes("—Å—É–º–Ω–∏–π") ||
              text.toLowerCase().includes("–ø–æ–≥–∞–Ω–∏–π")
            ? "–Ω–µ–≥–∞—Ç–∏–≤–Ω–∞"
            : "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞",
        score: Math.random() * 0.4 + 0.6,
      };
      setEmotion(mockResponse);
    } catch (error) {
      setEmotion({ error: "–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –µ–º–æ—Ü—ñ—ó" });
    }
    setLoading(false);
  };

  const getEmotionIcon = (emotionType) => {
    switch (emotionType) {
      case "–ø–æ–∑–∏—Ç–∏–≤–Ω–∞":
        return "üòä";
      case "–Ω–µ–≥–∞—Ç–∏–≤–Ω–∞":
        return "üòû";
      case "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞":
        return "üòê";
      default:
        return "‚ù§Ô∏è";
    }
  };

  const getProgressColor = (emotionType) => {
    switch (emotionType) {
      case "–ø–æ–∑–∏—Ç–∏–≤–Ω–∞":
        return "#22c55e"; // –∑–µ–ª–µ–Ω–∏–π
      case "–Ω–µ–≥–∞—Ç–∏–≤–Ω–∞":
        return "#ef4444"; // —á–µ—Ä–≤–æ–Ω–∏–π
      case "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞":
        return "#6b7280"; // —Å—ñ—Ä–∏–π
      default:
        return "#8b5cf6"; // —Ñ—ñ–æ–ª–µ—Ç–æ–≤–∏–π
    }
  };

  const getResultClass = (emotionType) => {
    switch (emotionType) {
      case "–ø–æ–∑–∏—Ç–∏–≤–Ω–∞":
        return "result result-positive";
      case "–Ω–µ–≥–∞—Ç–∏–≤–Ω–∞":
        return "result result-negative";
      case "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞":
        return "result result-neutral";
      default:
        return "result";
    }
  };

  return (
    <div className="page-wrapper">
      <div className="container">
        <div className="header">
          <div className="header-icon">üß†</div>
          <h1 className="header-title">–í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –µ–º–æ—Ü—ñ—ó –≤ —Ç–µ–∫—Å—Ç—ñ</h1>
          <p className="header-subtitle">
            –í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç —ñ –¥—ñ–∑–Ω–∞–π—Ç–µ—Å—è —è–∫—É –µ–º–æ—Ü—ñ—é –≤—ñ–Ω –ø–µ—Ä–µ–¥–∞—î
          </p>
        </div>

        <div className="card">
          <form onSubmit={handledSubmit}>
            <label htmlFor="text-input" className="label">
              –í–∞—à —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É:
            </label>
            <div className="input-wrapper">
              <input
                id="text-input"
                type="text"
                value={text}
                onChange={(e) => setText(e.target.value)}
                placeholder="–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç —Ç—É—Ç..."
                className="input"
              />
              <span className="input-icon">‚ù§Ô∏è</span>
            </div>

            <button
              type="submit"
              disabled={loading || !text.trim()}
              className="button"
            >
              {loading ? "‚è≥ –û–±—Ä–æ–±–ª—è—é..." : "üì§ –ê–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –µ–º–æ—Ü—ñ—é"}
            </button>
          </form>
        </div>

        {loading && (
          <div className="loading">
            <p>‚è≥ –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç—É...</p>
          </div>
        )}

        {emotion && !emotion.error && (
          <div className={getResultClass(emotion.emotion)}>
            <div className="emotion-icon">{getEmotionIcon(emotion.emotion)}</div>
            <h3>–ï–º–æ—Ü—ñ—è: {emotion.emotion}</h3>
            <div className="progress-bar">
              <div
                className="progress-fill"
                style={{
                  width: `${emotion.score * 100}%`,
                  background: getProgressColor(emotion.emotion),
                }}
              ></div>
            </div>
            <p>–¢–æ—á–Ω—ñ—Å—Ç—å: {(emotion.score * 100).toFixed(1)}%</p>
          </div>
        )}

        {emotion && emotion.error && (
          <div className="error">
            <div className="error-icon">‚ùå</div>
            <h3>–ü–æ–º–∏–ª–∫–∞</h3>
            <p>{emotion.error}</p>
          </div>
        )}
      </div>
    </div>
  );
}

export default EmotionDetector;
